package it.novaverse.commonutilities.module.implementation.fix;

import it.novaverse.commonutilities.annotation.ConfigValue;
import it.novaverse.commonutilities.annotation.RegisterListeners;
import it.novaverse.commonutilities.module.Module;
import it.novaverse.commonutilities.service.PluginService;
import it.novaverse.commonutilities.service.ProtocolServiceWrapper;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;

import java.util.HashSet;
import java.util.Set;

@NoArgsConstructor(access = AccessLevel.PACKAGE)
@RegisterListeners
public class FixEnderpearlExploit implements Module, Listener {

    private PluginService service;

    @ConfigValue
    private Boolean enabled = true;
    @ConfigValue
    private Integer delay = 20;
    @ConfigValue
    private String message = "&cYou can't throw an enderpearl immediately after interacting with a block!";

    private Set<Player> cooldownPlayers;

    @Override
    public void onLoad(String name, PluginService service, ProtocolServiceWrapper protocol) {
        this.service = service;
    }

    @Override
    public void onEnable() {
        cooldownPlayers = new HashSet<>();
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }

    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent event) {
        Action action = event.getAction();
        Player player = event.getPlayer();
        if (action.equals(Action.RIGHT_CLICK_BLOCK)) {
            Material block = event.getClickedBlock().getType();
            if (isDoor(block)) {
                cooldownPlayers.add(player);
                service.delayed(() -> this.cooldownPlayers.remove(player), delay);
            }
        }
        ItemStack item = event.getItem();
        if (item == null || !item.getType().equals(Material.ENDER_PEARL)) {
            return;
        }
        if (!this.cooldownPlayers.contains(player)) {
            return;
        }
        event.setCancelled(true);
        event.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&', message));
    }

    private static boolean isDoor(Material material) {
        return material.name().contains("DOOR") || material.name().contains("GATE");
    }
}
